# 
# \brief test laptop (CR-48 "Mario") run script for x86_32
# \author Joel Desermeau
# \date
#

assert_spec x86

set use_wifi_driver 	1
set wifi_ssid           ssid
set wifi_psk            psk
set ip_match_string "got IP address (\[0-9]{1,3}.\[0-9]{1,3}.\[0-9]{1,3}.\[0-9]{1,3}).*\n"
set network_driver "wifi_drv"

set build_components {
	core init 
	drivers/timer drivers/framebuffer drivers/input
	drivers/rtc drivers/usb drivers/wifi
	server/terminal server/fs_rom server/ram_fs
	server/tcp_terminal server/report_rom
	noux/minimal 
	lib/libc_noux lib/vfs/jitterentropy
	test/libports/ncurses
}

source ${genode_dir}/repos/base/run/platform_drv.inc

#
# Build Noux packages only once
#

foreach pkg {bash coreutils diffutils findutils tar vim less grep sed which lynx make binutils_x86 gcc_x86 gdb_x86} {
	lappend_if [expr ![file exists bin/$pkg]] build_components noux-pkg/$pkg }

append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

set lx_ip_addr "192.168.1.42"

# write default vimrc file
set vimrc_fd [open bin/vimrc w]
puts $vimrc_fd {
set noloadplugins
set hls
set nocompatible
set laststatus=2
set noswapfile
set viminfo=}
close $vimrc_fd

append config {
	<config verbose="yes">
		<parent-provides>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="PD"/>
			<service name="IRQ"/>
			<service name="IO_PORT"/>
			<service name="IO_MEM"/>
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
		<default caps="100"/>
		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Timer"/></provides>
		</start>}

proc usb_drv_ram_quota {} {
        return 18M
}

append config {
        <start name="report_rom">
                <resource name="RAM" quantum="2M"/>
                <provides> <service name="Report" /> <service name="ROM" /> </provides>
                <config> <rom/> </config>
        </start>
        <start name="config_fs">
                <binary name="ram_fs"/>
                <resource name="RAM" quantum="4M"/>
                <provides> <service name="File_system"/> </provides>
                <config>
                        <policy label_prefix="config_rom" root="/"/>
                        <policy label="wifi_drv -> config" root="/" writeable="yes"/>
                        <content>
                                <inline name="wlan_configuration">}
append config "
<selected_network ssid=\"$wifi_ssid\" protection=\"WPA-PSK\" psk=\"$wifi_psk\"/>"
append config {
                                </inline>
                                <inline name="wpa_supplicant.conf"></inline>
                        </content>
                </config>
        </start>
        <start name="config_rom">
                <binary name="fs_rom"/>
                <resource name="RAM" quantum="4M"/>
                <provides><service name="ROM"/></provides>
                <route>
                        <service name="File_system"> <child name="config_fs" /> </service>
                        <any-service> <parent/> <any-child/> </any-service>
                </route>
        </start>
        <start name="wifi_drv" caps="200">
                <resource name="RAM" quantum="32M"/>
                <provides> <service name="Nic"/> </provides>
                <config>
                        <libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc"/>
                        <vfs>
                                <dir name="dev">
                                        <log/>
                                        <jitterentropy name="random"/>
                                        <jitterentropy name="urandom"/>
                                </dir>
                                <dir name="config"> <fs label="config"/> </dir>
                        </vfs>
                </config>
                <route>
                        <service name="Rtc"> <any-child/> </service>
                        <service name="File_system"> <child name="config_fs"/> </service>
                        <service name="ROM" label="wlan_configuration"> <child name="config_rom" /> </service>
                        <service name="Report"> <child name="report_rom"/> </service>
                        <any-service> <parent/> <any-child /> </any-service>
                </route>
        </start>}

append config {
		<start name="rtc_drv">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Rtc"/></provides>
		</start>}

append config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
		<config width="640" height="480"/>
	</start>}

append_platform_drv_config

append config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
		<config width="640" height="480"/>
	</start>}

append config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ehci="yes" xhci="yes"> <hid/> </config>
	</start> }

append config {
	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="us"/>
			<font size="12" />
		</config>
	</start>
	<start name="ram_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<!-- preload RAM file system with some ROM images -->
			<content>
				<dir name="tmp">
					<rom name="init" as="blubb" />
				</dir>
				<dir name="home">
					<dir name="jdd">
						<!-- just a place holder -->
						<rom name="timer" />
						<inline name="diff_me_a.txt">
Hello world ?!
						</inline>
						<inline name="diff_me_b.txt">
Hello world !!
						</inline>
					</dir>
				</dir>
			</content>
			<!-- constrain sessions according to their labels -->
			<policy label="noux -> root" root="/" />
			<policy label="noux -> home" root="/home/jdd" writeable="yes" />
			<policy label="noux -> tmp"  root="/tmp"       writeable="yes" />
		</config>
	</start>
	<start name="noux" caps="1000">
		<resource name="RAM" quantum="1G" />
		<config>
			<fstab>
				<tar name="bash.tar" />
				<tar name="coreutils.tar" />
				<tar name="diffutils.tar" />
				<tar name="findutils.tar" />
				<tar name="vim.tar" />
				<tar name="tar.tar" />
				<tar name="less.tar" />
				<tar name="grep.tar" />
				<tar name="sed.tar" />
				<tar name="which.tar" />
				<tar name="lynx.tar" />
				<tar name="make.tar" />
				<tar name="binutils_x86.tar" />
				<tar name="gcc_x86.tar" />
				<tar name="gdb_x86.tar" />

				<!-- Example of how to impose policy onto a file system
				     session. The label attached to the 'fs' node is used
				     as a key to select the policy of 'ram_fs' -->

				<dir name="home"> <fs label="home" /> </dir>
				<dir name="share"> <dir name="vim"> <rom name="vimrc"/> </dir> </dir>

				<!-- The entirety of ram_fs is mounted within the '/ram'
				     directory. -->

				<dir name="ram"> <fs label="root" /> </dir>
				<dir name="tmp"> <fs label="tmp" /> </dir>

				<dir name="dev">}

append config {
					<rtc/>}
append config {
					<zero/> <null/>
				</dir>
			</fstab>
			<start name="/bin/bash">
				<env name="TERM" value="linux" />
			</start>
		</config>
	</start>
</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer noux terminal ram_fs fs_rom report_rom

	ld.lib.so libc.lib.so libm.lib.so libc_noux.lib.so
	libcrypto.lib.so libssl.lib.so ncurses.lib.so posix.lib.so 
	wpa_driver_nl80211.lib.so wpa_supplicant.lib.so
	vfs_jitterentropy.lib.so wifi.lib.so

	coreutils.tar diffutils.tar findutils.tar binutils_x86.tar
	bash.tar vim.tar vimrc less.tar tar.tar grep.tar sed.tar
	which.tar lynx.tar make.tar gcc_x86.tar gdb_x86.tar

	ps2_drv rtc_drv fb_drv usb_drv wifi_drv

	iwlwifi-6000-4.ucode
        iwlwifi-6000g2a-6.ucode
        iwlwifi-6000g2b-6.ucode
        iwlwifi-7260-16.ucode
        iwlwifi-7265-16.ucode
        iwlwifi-7265D-16.ucode
        iwlwifi-8000C-16.ucode
}

append_platform_drv_boot_modules
build_boot_image $boot_modules
run_genode_until forever

set force_ports ""

regexp $ip_match_string $output all ip_addr
puts ""

sleep 3

exec sh -c "rm bin/*.ucode"
